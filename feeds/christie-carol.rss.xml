<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>- Christie-Carol</title><link>/</link><description></description><lastBuildDate>Mon, 10 Aug 2020 00:00:00 +0100</lastBuildDate><item><title>git merge</title><link>/git-merge-post.html</link><description>&lt;p&gt;This is a very simple list of instructions on how to do a basic git merge. 
When you're doing a git merge, you're working with two branches.
&lt;dl&gt;
  &lt;dt&gt;Current Branch&lt;/dt&gt;
  &lt;dd&gt;The branch where HEAD is pointing, which will get changed by the merge.&lt;/dd&gt;
  &lt;dt&gt;Target Branch&lt;/dt&gt;
  &lt;dd&gt;Remains unchanged after the merge, it is the one you want to keep the same. &lt;/dd&gt;
&lt;/dl&gt;&lt;/p&gt;
&lt;p&gt;You can check to see where the HEAD is pointing using: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt; &lt;span class="c1"&gt;--short HEAD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should switch to the branch you want to change using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make sure you have the most recent changes to the remote, do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="k"&gt;fetch&lt;/span&gt;
    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;on the master branch.&lt;/p&gt;
&lt;p&gt;Finally, do &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to get the changes from the target branch onto the current branch.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christie-Carol</dc:creator><pubDate>Mon, 10 Aug 2020 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2020-08-10:/git-merge-post.html</guid><category>git</category><category>git</category></item><item><title>EDA Kaggle Predict future sales competition</title><link>/eda-post.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christie-Carol</dc:creator><pubDate>Mon, 08 Jun 2020 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2020-06-08:/eda-post.html</guid><category>kaggle</category><category>eda</category><category>matplotlib</category></item><item><title>Stacked ensemble Kaggle Predict future sales competition</title><link>/ensemble-post.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christie-Carol</dc:creator><pubDate>Mon, 08 Jun 2020 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2020-06-08:/ensemble-post.html</guid><category>kaggle</category><category>ensemble</category><category>stacking</category><category>machine learning</category></item><item><title>What's so great about TDD?</title><link>/tdd-post.html</link><description>&lt;p&gt;Of course, having a test is necessary and having lots of tests is good. The special thing about TDD, beyond simply having a lot of tests,
is writing your test before you write the code. Tests become a step in designing the code, making it clear to you what the code 
needs to do. When using TDD your workflow will look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a test.&lt;/li&gt;
&lt;li&gt;Write some code until the test passes.&lt;/li&gt;
&lt;li&gt;Refactor. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(and repeat).&lt;/p&gt;
&lt;p&gt;Writing the test before the code shapes the design of the code, making it easier to test and ensuring that you have a clear understanding
of what functionality is needed. Code which is easy to test is typically cleaner/better/easier to work with code.&lt;/p&gt;
&lt;p&gt;I read this heuristic somewhere, which said something along the lines of: when you feel stressed, write a test. Which I think is fantastic,
because it really prevents you from running around like a headless chicken and gives you confidence that moving along the right path
(and that youre not making things worse).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“If you have more than one reason to do something (choose a doctor or veterinarian, hire a gardener or an employee, marry a person, go on a trip), just don’t do it. It does not mean that one reason is better than two, just that by invoking more than one reason you are trying to convince yourself to do something. Obvious decisions (robust to error) require no more than a single reason.”&lt;/p&gt;
&lt;p&gt;― Nassim Nicholas Taleb, Antifragile: Things That Gain from Disorder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think that this single reason would justify using TDD: it gives you confidence to make changes.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christie-Carol</dc:creator><pubDate>Mon, 08 Jun 2020 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2020-06-08:/tdd-post.html</guid><category>misc</category><category>testing</category><category>TDD</category></item></channel></rss>