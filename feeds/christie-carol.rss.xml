<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>- Christie-Carol</title><link>/</link><description></description><lastBuildDate>Mon, 08 Jun 2020 00:00:00 +0100</lastBuildDate><item><title>Whats so great about TDD?</title><link>/tdd-post.html</link><description>&lt;p&gt;Of course, having a test is necessary and having lots of tests is good. The special thing about TDD, beyond simply having a lot of tests,
is writing your test before you write the code. Tests become a step in the design of the code and make it clear to you what the code 
should do. When using TDD your workflow will look like this:
    1. Write a test
    2. Write some code until the test passes
    3. Refactor 
(and repeat).&lt;/p&gt;
&lt;p&gt;Writing the test before the code shapes the design of the code, making it easier to test and ensuring that you have a clear understanding
of what functionality is needed. Code which is easy to test is typically cleaner/better/easier to work with code.&lt;/p&gt;
&lt;p&gt;“If you have more than one reason to do something (choose a doctor or veterinarian, hire a gardener or an employee, marry a person, go on a trip), just don’t do it. It does not mean that one reason is better than two, just that by invoking more than one reason you are trying to convince yourself to do something. Obvious decisions (robust to error) require no more than a single reason.”&lt;/p&gt;
&lt;p&gt;― Nassim Nicholas Taleb, Antifragile: Things That Gain from Disorder&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christie-Carol</dc:creator><pubDate>Mon, 08 Jun 2020 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2020-06-08:/tdd-post.html</guid><category>misc</category><category>testing</category><category>TDD</category></item></channel></rss>